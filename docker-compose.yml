version: '3.8'

services:

#   database:
#     image: postgres:alpine
#     container_name: database
#     restart: always
#     ports:
#       - "5432:5432"
#     volumes:
#       - postgres:/var/lib/postgresql/data
#     environment:
#       POSTGRES_USER: APP
#       POSTGRES_PASSWORD: APP
#       POSTGRES_DB: labprog

  database:
    image: neo4j:5.23.0
    environment:
      - NEO4J_AUTH=neo4j/ericfaculucas
    ports:
      - "7474:7474"
      - "7687:7687"

  # 10.000km

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    volumes:
      - ./backend:/app
      - ../common/backend/m2:/root/.m2
    working_dir: /app
    command: sh run.sh
    ports:
      - 8080:8080
      - 35729:35729
      - 5005:5005
    depends_on:
      - database

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ### --- SEGUIR INSTRUCIVO AQUI ####
    #0 -- Comentar luego de ng new
    #working_dir: /home/node 
    # -- Descomentar luego de ng new
    working_dir: /home/node/cli
    command: ng serve --host=0.0.0.0
    ### ------------------------- ####
    restart: always
    ports:
      - "4200:4200"
    # stdin_open y tty mantienen el servidor funcionando sin commandos en ejecuciÃ³n
    stdin_open: true
    tty: true
    volumes:
      - ./frontend:/home/node      
    # Activar lo siguiente luego del taller End-to-end
    # depends_on: 
      # - backend

  testing:
    image: node:alpine
    container_name: testing
    profiles:
      - test
    working_dir: /home/node
    volumes:
      - ./testing:/home/node
      - ../common/testing/node_modules:/home/node/node_modules      
    command: npm test
    # comentar esto
    # depends_on:
    #   - backend

# volumes:
#   postgres: